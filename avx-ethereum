// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract GradingSystem {
    struct Student {
        uint256 id;
        string name;
        uint8 grade;
        bool exists;
    }

    mapping(uint256 => Student) public students;
    uint256 public studentCount;

    address public teacher;

    constructor() {
        teacher = msg.sender;
    }

    modifier onlyTeacher() {
        require(msg.sender == teacher, "Only the teacher can perform this action");
        _;
    }

    function addStudent(uint256 _id, string memory _name) public onlyTeacher {
        require(_id > 0, "Student ID must be greater than zero");
        require(!students[_id].exists, "Student ID already exists");
        students[_id] = Student(_id, _name, 0, true);
        studentCount++;
        assert(studentCount > 0);
    }

    function assignGrade(uint256 _id, uint8 _grade) public onlyTeacher {
        require(students[_id].exists, "Student does not exist");
        require(_grade >= 0 && _grade <= 100, "Grade must be between 0 and 100");
        students[_id].grade = _grade;
    }

    function getStudent(uint256 _id) public view returns (uint256, string memory, uint8) {
        Student memory student = students[_id];
        require(student.exists, "Student does not exist");
        return (student.id, student.name, student.grade);
    }

    function removeStudent(uint256 _id) public onlyTeacher {
        Student memory student = students[_id];
        require(student.exists, "Student does not exist");
        
        delete students[_id];
        studentCount--;

        if (students[_id].exists) {
            revert("Failed to remove the student");
        }
    }
} 
